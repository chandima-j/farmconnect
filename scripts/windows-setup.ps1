# FarmConnect Windows Setup Script
# Run this script in PowerShell as Administrator

param(
    [switch]$InstallPrerequisites,
    [switch]$SetupProject,
    [switch]$StartServices,
    [switch]$TestSetup,
    [switch]$All
)

# Colors for output
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Install-Prerequisites {
    Write-ColorOutput "üîß Installing Prerequisites..." $Blue
    
    # Check if running as administrator
    if (-not (Test-Administrator)) {
        Write-ColorOutput "‚ùå Please run this script as Administrator to install prerequisites" $Red
        return $false
    }
    
    # Install Chocolatey if not present
    if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
        Write-ColorOutput "Installing Chocolatey..." $Yellow
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    }
    
    # Install required software
    $packages = @(
        "nodejs",
        "git",
        "docker-desktop",
        "vscode",
        "microsoft-windows-terminal"
    )
    
    foreach ($package in $packages) {
        Write-ColorOutput "Installing $package..." $Yellow
        choco install $package -y
    }
    
    # Enable WSL 2
    Write-ColorOutput "Enabling WSL 2..." $Yellow
    dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
    dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
    
    Write-ColorOutput "‚úÖ Prerequisites installed. Please restart your computer and run Docker Desktop." $Green
    return $true
}

function Setup-Project {
    Write-ColorOutput "üöÄ Setting up FarmConnect project..." $Blue
    
    # Check if Docker is running
    try {
        docker --version | Out-Null
        Write-ColorOutput "‚úÖ Docker is available" $Green
    }
    catch {
        Write-ColorOutput "‚ùå Docker is not running. Please start Docker Desktop." $Red
        return $false
    }
    
    # Generate secure environment variables
    Write-ColorOutput "Generating secure environment variables..." $Yellow
    
    Add-Type -AssemblyName System.Web
    $jwtSecret = [System.Web.Security.Membership]::GeneratePassword(64, 10)
    $encryptionKey = [System.Web.Security.Membership]::GeneratePassword(32, 0)
    $redisPassword = [System.Web.Security.Membership]::GeneratePassword(16, 0)
    $vaultToken = [System.Web.Security.Membership]::GeneratePassword(32, 0)
    
    # Create .env file
    $envContent = @"
# Generated by FarmConnect Windows Setup Script
# $(Get-Date)

# Security Keys
JWT_SECRET=$jwtSecret
ENCRYPTION_KEY=$encryptionKey
REDIS_PASSWORD=$redisPassword
VAULT_ROOT_TOKEN=$vaultToken
GRAFANA_PASSWORD=admin123

# External Services
EMAIL_SERVICE_URL=https://api.sendgrid.com/v3
SMS_SERVICE_URL=https://api.twilio.com/2010-04-01

# Environment
NODE_ENV=development
LOG_LEVEL=info

# Compliance Settings
AUDIT_RETENTION_DAYS=2555
DATA_ENCRYPTION_ENABLED=true
ACCESS_LOG_ENABLED=true
SECURITY_HEADERS_ENABLED=true

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
"@
    
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-ColorOutput "‚úÖ Environment file created" $Green
    
    # Create logs directory
    if (-not (Test-Path "logs")) {
        New-Item -ItemType Directory -Path "logs"
        Write-ColorOutput "‚úÖ Logs directory created" $Green
    }
    
    return $true
}

function Start-Services {
    Write-ColorOutput "üê≥ Starting FarmConnect services..." $Blue
    
    # Check if docker-compose.yml exists
    if (-not (Test-Path "docker-compose.yml")) {
        Write-ColorOutput "‚ùå docker-compose.yml not found. Please ensure you're in the project directory." $Red
        return $false
    }
    
    # Build and start services
    Write-ColorOutput "Building services (this may take a few minutes)..." $Yellow
    docker-compose build
    
    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput "‚ùå Failed to build services" $Red
        return $false
    }
    
    Write-ColorOutput "Starting services..." $Yellow
    docker-compose up -d
    
    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput "‚ùå Failed to start services" $Red
        return $false
    }
    
    # Wait for services to be ready
    Write-ColorOutput "Waiting for services to be ready..." $Yellow
    Start-Sleep -Seconds 30
    
    # Initialize databases
    Write-ColorOutput "Initializing databases..." $Yellow
    
    $services = @("user-service", "product-service", "order-service", "payment-service", "audit-service")
    
    foreach ($service in $services) {
        Write-ColorOutput "Migrating $service database..." $Yellow
        docker-compose exec -T $service npm run db:migrate
        
        if ($service -eq "user-service") {
            Write-ColorOutput "Seeding $service database..." $Yellow
            docker-compose exec -T $service npm run db:seed
        }
    }
    
    Write-ColorOutput "‚úÖ All services started successfully" $Green
    return $true
}

function Test-Setup {
    Write-ColorOutput "üß™ Testing FarmConnect setup..." $Blue
    
    # Test API Gateway
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:8000/health" -TimeoutSec 10
        Write-ColorOutput "‚úÖ API Gateway is responding" $Green
    }
    catch {
        Write-ColorOutput "‚ùå API Gateway is not responding" $Red
        return $false
    }
    
    # Test user registration
    try {
        $userData = @{
            email = "test@farmconnect.com"
            password = "password123"
            name = "Test User"
            userType = "BUYER"
            address = "123 Test Street"
            phone = "+1234567890"
        } | ConvertTo-Json
        
        $headers = @{
            "Content-Type" = "application/json"
        }
        
        $response = Invoke-RestMethod -Uri "http://localhost:8000/api/auth/register" -Method POST -Body $userData -Headers $headers -TimeoutSec 10
        Write-ColorOutput "‚úÖ User registration is working" $Green
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è User registration test failed (this might be expected if user already exists)" $Yellow
    }
    
    # Test login
    try {
        $loginData = @{
            email = "test@farmconnect.com"
            password = "password123"
        } | ConvertTo-Json
        
        $response = Invoke-RestMethod -Uri "http://localhost:8000/api/auth/login" -Method POST -Body $loginData -Headers $headers -TimeoutSec 10
        Write-ColorOutput "‚úÖ User login is working" $Green
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è User login test failed" $Yellow
    }
    
    # Display access URLs
    Write-ColorOutput "`nüåê Access URLs:" $Blue
    Write-ColorOutput "API Gateway: http://localhost:8000" $Yellow
    Write-ColorOutput "Kong Admin: http://localhost:8001" $Yellow
    Write-ColorOutput "Grafana: http://localhost:3000 (admin/admin123)" $Yellow
    Write-ColorOutput "Kibana: http://localhost:5601" $Yellow
    Write-ColorOutput "Prometheus: http://localhost:9090" $Yellow
    Write-ColorOutput "Vault: http://localhost:8200" $Yellow
    
    return $true
}

function Show-Help {
    Write-ColorOutput "FarmConnect Windows Setup Script" $Blue
    Write-ColorOutput "Usage: .\windows-setup.ps1 [options]" $Yellow
    Write-ColorOutput ""
    Write-ColorOutput "Options:" $Yellow
    Write-ColorOutput "  -InstallPrerequisites  Install required software (requires Administrator)" $Yellow
    Write-ColorOutput "  -SetupProject         Generate environment files and setup project" $Yellow
    Write-ColorOutput "  -StartServices        Build and start all microservices" $Yellow
    Write-ColorOutput "  -TestSetup           Test the setup and display access URLs" $Yellow
    Write-ColorOutput "  -All                 Run all steps in sequence" $Yellow
    Write-ColorOutput ""
    Write-ColorOutput "Examples:" $Yellow
    Write-ColorOutput "  .\windows-setup.ps1 -All" $Yellow
    Write-ColorOutput "  .\windows-setup.ps1 -SetupProject -StartServices" $Yellow
}

# Main execution
if ($All) {
    $InstallPrerequisites = $true
    $SetupProject = $true
    $StartServices = $true
    $TestSetup = $true
}

if (-not ($InstallPrerequisites -or $SetupProject -or $StartServices -or $TestSetup)) {
    Show-Help
    exit 0
}

Write-ColorOutput "üå± FarmConnect Microservices Setup for Windows 11" $Green
Write-ColorOutput "=================================================" $Green

$success = $true

if ($InstallPrerequisites) {
    $success = $success -and (Install-Prerequisites)
    if (-not $success) { exit 1 }
}

if ($SetupProject) {
    $success = $success -and (Setup-Project)
    if (-not $success) { exit 1 }
}

if ($StartServices) {
    $success = $success -and (Start-Services)
    if (-not $success) { exit 1 }
}

if ($TestSetup) {
    $success = $success -and (Test-Setup)
}

if ($success) {
    Write-ColorOutput "`nüéâ FarmConnect setup completed successfully!" $Green
    Write-ColorOutput "You can now start developing and testing the microservices platform." $Green
} else {
    Write-ColorOutput "`n‚ùå Setup encountered some issues. Please check the output above." $Red
    exit 1
}